#+title: Additional (Unsorted?) Configuration
#+author: James Brown

* Helper Functions

  #+begin_src emacs-lisp
  (defun find-any-function ()
    (interactive)
    (if (derived-mode-p 'lisp-mode)
        (call-interactively 'slime-edit-definition-other-window)
      (find-function-at-point)))

  (defun map-many-keys (map keylist)
    (flet ((mapkey (pair)
                   (define-key map
                     (kbd (car pair))
                     (cadr pair))))
      (mapc 'mapkey keylist)))

  (defun replace-bad-quotes ()
    (interactive)
    (flet ((replacer (from to)
                     (save-excursion
                       (setf (point) 0)
                       (while (search-forward from nil t)
                         (replace-match to nil t)))))
      (replacer (string #o222) "'")
      (replacer (string #o223) (string #X201C))
      (replacer (string #o224) (string #X201D))))

  (defmacro wrap-for-evil (fun)
    `(lambda (n)
       (interactive "p")
       (dotimes (i n nil)
         (,fun))))
  #+end_src

* Keybindings
** Translations
   #+begin_src emacs-lisp
   (keyboard-translate ?\C-h ?\C-?)
   #+end_src

** Evil

   #+begin_src emacs-lisp
   (map-many-keys evil-normal-state-map
                  `(("gs" ,(lambda () (interactive)
                             (start-process "zsh" nil "mintty"
                                            "-p" "1920,0" "-s" "76,55" "zsh")))
                    ("zi" make-image-link)
                    ("zj" ,(wrap-for-evil outline-next-heading))
                    ("zk" ,(wrap-for-evil outline-previous-heading))
                    ("za" outline-cycle)
                    ("zo" ,(lambda () (interactive) (show-entry) (show-children)))
                    ("zc" hide-subtree)
                    ("zu" outline-up-heading)
                    ("zR" show-all)
                    ("zm" wolfram-query-latex)
                    ("zp" replace-regexp)))

   (map-many-keys evil-insert-state-map
                  `(
                    ("C-h" delete-backward-char)
                    ("C-e" beginning-of-line)
                    ("C-a" end-of-line)
                    ))

   (map-many-keys evil-visual-state-map
                  `(("C-o" open-rectangle)))

   (map-many-keys minibuffer-local-map
                  `(("C-h" delete-backward-char)))

   (evil-leader/set-key
     "i" 'imenu
     "x" 'er/expand-region
     "h" 'hide-sublevels
     "f" 'find-any-function
     "v" 'find-variable-at-point)

   (setq expand-region-contract-fast-key "z")
   #+end_src

** Otherwise

   #+begin_src emacs-lisp
   ;; Truly Global Keys, will clobber minor modes
   (bind-keys* ("C-M-i" . indent-region)
               ("C-M-h" . sp-backward-kill-word)
               ("C-x C-o" . other-window)
               ("C-x r T" . string-insert-rectangle)
               ("C-x C-s" . (lambda () (interactive)
                              (delete-trailing-whitespace)
                              (save-buffer))))

   (define-key yas-minor-mode-map (kbd "C-,") 'yas-expand)
   #+end_src

* Auto-Save Settings

  I don't like forgetting to save things, and I don't care to use
  backup files, so I'd rather just save all the time.

  I need to make it so that this only happens after I stop typing
  for a while though.

  #+name: intellij-style auto-save
  #+begin_src emacs-lisp :tangle no
  (setq auto-save-interval 1
        auto-save-timeout  1)

  (defun full-auto-save ()
    (interactive)
    (save-excursion
      (dolist (buf (buffer-list))
        (set-buffer buf)
        (if (and (buffer-file-name) (buffer-modified-p))
            (basic-save-buffer)))))

  (add-hook 'auto-save-hook 'full-auto-save)
  #+end_src


* Neotree
  :PROPERTIES:
  :CUSTOM_ID: neotree
  :END:

  It's a NerdTree equivalent for Emacs.

  #+NAME: neotree
  #+begin_src emacs-lisp
  (defun ome-neotree-setup ()
    (eval-after-load 'neotree
      (global-set-key [f2] 'neotree-toggle)))

  (ome-install 'neotree)
  #+end_src
* Insert-Guid

  Sometimes, you just need a guid.

  #+name: GuidGen for emacs
  #+begin_src emacs-lisp
  (defun insert-guid-at-point ()
    (interactive)
    (cl-flet* ((hex-digit () (insert (elt "0123456789ABCDEF"
                                          (random 16))))
               (n-hex-digits (n) (dotimes (i n) (hex-digit)))
               (dash () (insert "-")))
      (n-hex-digits 8)
      (dash)
      (n-hex-digits 4)
      (dash)
      (n-hex-digits 4)
      (dash)
      (n-hex-digits 4)
      (dash)
      (n-hex-digits 12)
      ))
  #+end_src
* Flycheck-C++-Helper
  #+begin_src emacs-lisp
  (defun flycheck-c++11 ()
    (interactive)
    (setq flycheck-clang-language-standard "c++11")
    (flycheck-select-checker c/c++-clang))

  (defun flycheck-select-checker-c++11 ()
    (setq flycheck-clang-language-standard "c++11"))

  (add-hook 'c++-mode-hook 'flycheck-select-checker-c++11)
  #+end_src
